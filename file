{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPWrkCxPaHnuHwMfX4DKjzQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xiaohongchen01/Exploloration_sqlite3_pandas/blob/main/file\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "PrQM7tgo5GOj"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sqlalchemy import create_engine\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import sqlite3"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip freeze > requirements.txt"
      ],
      "metadata": {
        "id": "3CK4WDVe5O09"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## Data source\n",
        "## # https://opendata.maryland.gov/Budget/County-Expenditures-By-Category-Fiscal-Year-2010/hh3e-irvk/about_data\n",
        "\n",
        "data = pd.read_csv('https://opendata.maryland.gov/resource/hh3e-irvk.csv')\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 940
        },
        "id": "Me3ez1-I7Nxg",
        "outputId": "e8cd8342-b231-43ed-d4fa-2327c6e5a6a5"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              county  general_government  public_safety  public_works  \\\n",
              "0           Allegany                 3.1            6.8          12.2   \n",
              "1       Anne Arundel                 5.4           12.2          11.6   \n",
              "2     Baltimore City                 5.7           14.3          16.7   \n",
              "3   Baltimore County                 4.8           11.8          11.7   \n",
              "4            Calvert                 4.0            7.3           8.1   \n",
              "5           Caroline                 3.0            7.7           2.8   \n",
              "6            Carroll                 6.2            5.4           6.5   \n",
              "7              Cecil                 3.9            9.0           7.0   \n",
              "8            Charles                 6.4           13.1           7.7   \n",
              "9         Dorchester                10.4            8.7           7.0   \n",
              "10         Frederick                 4.4           10.2           8.5   \n",
              "11           Garrett                 4.4            6.3          19.0   \n",
              "12           Harford                 9.6            9.6           9.1   \n",
              "13            Howard                 6.9           10.5           8.7   \n",
              "14              Kent                 6.8           11.8           9.0   \n",
              "15        Montgomery                 6.1           10.6          13.1   \n",
              "16   Prince George’s                 5.4            9.6          10.6   \n",
              "17      Queen Anne’s                 5.2           10.9           9.2   \n",
              "18        St. Mary’s                 5.7            9.0           7.1   \n",
              "19          Somerset                 8.3            7.3          10.2   \n",
              "20            Talbot                 6.7            9.3           7.9   \n",
              "21        Washington                 3.3            8.4           9.9   \n",
              "22          Wicomico                 2.5            7.2           4.8   \n",
              "23         Worcester                 6.7           12.4           8.9   \n",
              "24         Statewide                 5.7           10.8          11.5   \n",
              "\n",
              "    health_social_services  education_libraries  parks_recreation  \\\n",
              "0                      6.2                 66.5               0.2   \n",
              "1                      3.5                 59.8               1.8   \n",
              "2                      4.8                 40.6               1.5   \n",
              "3                      2.5                 57.1               1.6   \n",
              "4                      3.1                 61.4               4.1   \n",
              "5                      4.3                 68.1               1.3   \n",
              "6                      3.3                 64.8               0.7   \n",
              "7                      4.0                 68.6               0.5   \n",
              "8                      3.1                 60.4               1.8   \n",
              "9                      4.6                 59.8               0.9   \n",
              "10                     4.6                 63.2               1.0   \n",
              "11                     5.0                 55.1               0.2   \n",
              "12                     2.7                 57.9               1.9   \n",
              "13                     2.4                 60.4               2.5   \n",
              "14                     9.5                 50.1               6.7   \n",
              "15                     4.8                 50.2               3.3   \n",
              "16                     2.2                 52.7               5.6   \n",
              "17                     5.1                 51.8               2.9   \n",
              "18                     3.5                 63.4               2.3   \n",
              "19                     6.2                 60.2               1.8   \n",
              "20                     6.1                 60.4               3.9   \n",
              "21                     3.1                 69.3               0.9   \n",
              "22                     7.0                 69.4               2.5   \n",
              "23                     6.6                 51.6               0.8   \n",
              "24                     3.7                 54.5               2.6   \n",
              "\n",
              "    debt_service  other  \n",
              "0            2.6    2.3  \n",
              "1            4.7    1.1  \n",
              "2            2.9   13.5  \n",
              "3            3.0    7.4  \n",
              "4            5.5    6.5  \n",
              "5            6.6    6.2  \n",
              "6            6.6    6.6  \n",
              "7            4.8    2.2  \n",
              "8            5.4    2.2  \n",
              "9            2.4    6.2  \n",
              "10           4.7    3.4  \n",
              "11           1.5    8.5  \n",
              "12           6.4    2.7  \n",
              "13           6.2    2.4  \n",
              "14           3.8    2.4  \n",
              "15           5.0    6.9  \n",
              "16           4.1    9.8  \n",
              "17           4.3   10.7  \n",
              "18           3.3    5.6  \n",
              "19           4.4    1.6  \n",
              "20           0.7    5.0  \n",
              "21           3.1    2.0  \n",
              "22           3.5    3.1  \n",
              "23           4.6    8.4  \n",
              "24           4.3    6.9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a933483-6012-4100-8440-0f338a77336a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>county</th>\n",
              "      <th>general_government</th>\n",
              "      <th>public_safety</th>\n",
              "      <th>public_works</th>\n",
              "      <th>health_social_services</th>\n",
              "      <th>education_libraries</th>\n",
              "      <th>parks_recreation</th>\n",
              "      <th>debt_service</th>\n",
              "      <th>other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Allegany</td>\n",
              "      <td>3.1</td>\n",
              "      <td>6.8</td>\n",
              "      <td>12.2</td>\n",
              "      <td>6.2</td>\n",
              "      <td>66.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>2.6</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Anne Arundel</td>\n",
              "      <td>5.4</td>\n",
              "      <td>12.2</td>\n",
              "      <td>11.6</td>\n",
              "      <td>3.5</td>\n",
              "      <td>59.8</td>\n",
              "      <td>1.8</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Baltimore City</td>\n",
              "      <td>5.7</td>\n",
              "      <td>14.3</td>\n",
              "      <td>16.7</td>\n",
              "      <td>4.8</td>\n",
              "      <td>40.6</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>13.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Baltimore County</td>\n",
              "      <td>4.8</td>\n",
              "      <td>11.8</td>\n",
              "      <td>11.7</td>\n",
              "      <td>2.5</td>\n",
              "      <td>57.1</td>\n",
              "      <td>1.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Calvert</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>8.1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>61.4</td>\n",
              "      <td>4.1</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Caroline</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.7</td>\n",
              "      <td>2.8</td>\n",
              "      <td>4.3</td>\n",
              "      <td>68.1</td>\n",
              "      <td>1.3</td>\n",
              "      <td>6.6</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Carroll</td>\n",
              "      <td>6.2</td>\n",
              "      <td>5.4</td>\n",
              "      <td>6.5</td>\n",
              "      <td>3.3</td>\n",
              "      <td>64.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>6.6</td>\n",
              "      <td>6.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Cecil</td>\n",
              "      <td>3.9</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>68.6</td>\n",
              "      <td>0.5</td>\n",
              "      <td>4.8</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Charles</td>\n",
              "      <td>6.4</td>\n",
              "      <td>13.1</td>\n",
              "      <td>7.7</td>\n",
              "      <td>3.1</td>\n",
              "      <td>60.4</td>\n",
              "      <td>1.8</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Dorchester</td>\n",
              "      <td>10.4</td>\n",
              "      <td>8.7</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.6</td>\n",
              "      <td>59.8</td>\n",
              "      <td>0.9</td>\n",
              "      <td>2.4</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Frederick</td>\n",
              "      <td>4.4</td>\n",
              "      <td>10.2</td>\n",
              "      <td>8.5</td>\n",
              "      <td>4.6</td>\n",
              "      <td>63.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Garrett</td>\n",
              "      <td>4.4</td>\n",
              "      <td>6.3</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>55.1</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1.5</td>\n",
              "      <td>8.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Harford</td>\n",
              "      <td>9.6</td>\n",
              "      <td>9.6</td>\n",
              "      <td>9.1</td>\n",
              "      <td>2.7</td>\n",
              "      <td>57.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>6.4</td>\n",
              "      <td>2.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Howard</td>\n",
              "      <td>6.9</td>\n",
              "      <td>10.5</td>\n",
              "      <td>8.7</td>\n",
              "      <td>2.4</td>\n",
              "      <td>60.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>6.2</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Kent</td>\n",
              "      <td>6.8</td>\n",
              "      <td>11.8</td>\n",
              "      <td>9.0</td>\n",
              "      <td>9.5</td>\n",
              "      <td>50.1</td>\n",
              "      <td>6.7</td>\n",
              "      <td>3.8</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Montgomery</td>\n",
              "      <td>6.1</td>\n",
              "      <td>10.6</td>\n",
              "      <td>13.1</td>\n",
              "      <td>4.8</td>\n",
              "      <td>50.2</td>\n",
              "      <td>3.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Prince George’s</td>\n",
              "      <td>5.4</td>\n",
              "      <td>9.6</td>\n",
              "      <td>10.6</td>\n",
              "      <td>2.2</td>\n",
              "      <td>52.7</td>\n",
              "      <td>5.6</td>\n",
              "      <td>4.1</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Queen Anne’s</td>\n",
              "      <td>5.2</td>\n",
              "      <td>10.9</td>\n",
              "      <td>9.2</td>\n",
              "      <td>5.1</td>\n",
              "      <td>51.8</td>\n",
              "      <td>2.9</td>\n",
              "      <td>4.3</td>\n",
              "      <td>10.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>St. Mary’s</td>\n",
              "      <td>5.7</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>63.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>5.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Somerset</td>\n",
              "      <td>8.3</td>\n",
              "      <td>7.3</td>\n",
              "      <td>10.2</td>\n",
              "      <td>6.2</td>\n",
              "      <td>60.2</td>\n",
              "      <td>1.8</td>\n",
              "      <td>4.4</td>\n",
              "      <td>1.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Talbot</td>\n",
              "      <td>6.7</td>\n",
              "      <td>9.3</td>\n",
              "      <td>7.9</td>\n",
              "      <td>6.1</td>\n",
              "      <td>60.4</td>\n",
              "      <td>3.9</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Washington</td>\n",
              "      <td>3.3</td>\n",
              "      <td>8.4</td>\n",
              "      <td>9.9</td>\n",
              "      <td>3.1</td>\n",
              "      <td>69.3</td>\n",
              "      <td>0.9</td>\n",
              "      <td>3.1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Wicomico</td>\n",
              "      <td>2.5</td>\n",
              "      <td>7.2</td>\n",
              "      <td>4.8</td>\n",
              "      <td>7.0</td>\n",
              "      <td>69.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Worcester</td>\n",
              "      <td>6.7</td>\n",
              "      <td>12.4</td>\n",
              "      <td>8.9</td>\n",
              "      <td>6.6</td>\n",
              "      <td>51.6</td>\n",
              "      <td>0.8</td>\n",
              "      <td>4.6</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Statewide</td>\n",
              "      <td>5.7</td>\n",
              "      <td>10.8</td>\n",
              "      <td>11.5</td>\n",
              "      <td>3.7</td>\n",
              "      <td>54.5</td>\n",
              "      <td>2.6</td>\n",
              "      <td>4.3</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a933483-6012-4100-8440-0f338a77336a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a933483-6012-4100-8440-0f338a77336a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a933483-6012-4100-8440-0f338a77336a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1566efc8-6c21-4020-99fb-35773520b5f4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1566efc8-6c21-4020-99fb-35773520b5f4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1566efc8-6c21-4020-99fb-35773520b5f4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c00ad043-16dd-4a15-8cae-200d15d5935a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c00ad043-16dd-4a15-8cae-200d15d5935a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"county\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"Charles\",\n          \"Prince George\\u2019s\",\n          \"Allegany\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"general_government\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.939346969128182,\n        \"min\": 2.5,\n        \"max\": 10.4,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          3.1,\n          6.7,\n          5.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_safety\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.266590685001007,\n        \"min\": 5.4,\n        \"max\": 14.3,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          6.8,\n          8.4,\n          10.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_works\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.427112487211355,\n        \"min\": 2.8,\n        \"max\": 19.0,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          7.7,\n          9.2,\n          12.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"health_social_services\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7318775938270001,\n        \"min\": 2.2,\n        \"max\": 9.5,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          6.2,\n          4.3,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education_libraries\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.10644777649143,\n        \"min\": 40.6,\n        \"max\": 69.4,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          66.5,\n          50.2,\n          60.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parks_recreation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.612379194441142,\n        \"min\": 0.2,\n        \"max\": 6.7,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          0.2,\n          3.9,\n          2.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"debt_service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.532231488167938,\n        \"min\": 0.7,\n        \"max\": 6.6,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2.6,\n          5.0,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2492409369984654,\n        \"min\": 1.1,\n        \"max\": 13.5,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          2.3,\n          5.0,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## create blank sqlite db with name maryland 2010.db\n",
        "\n",
        "sqlite3.connect('maryland2010_fiscal.db')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lLKMxOYX7zg2",
        "outputId": "a0049c9a-d5a5-4a62-9ddf-06ac5e766108"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlite3.Connection at 0x7822bba595d0>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## using sqlalchemy's create engine, create var conn to connect to our maryland2010_fiscal.db\n",
        "\n",
        "\n",
        "conn = create_engine('sqlite:///maryland2010_fiscal.db')\n",
        "conn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cAoV8-jG8Vwh",
        "outputId": "9bf924a8-b0b6-4e52-8951-30cb3b7404b8"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Engine(sqlite:///maryland2010_fiscal.db)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.to_sql('fiscal2010', conn, if_exists='replace',index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-mk9gD3o866Y",
        "outputId": "6b4de14a-a6b3-4a52-e1e1-b5f3fa762ff2"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sql_query1 = \"SELECT * FROM fiscal2010;\"\n",
        "\n",
        "response = pd.read_sql_query(sql_query1, conn)\n",
        "response"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 940
        },
        "id": "ioj6Yt2O-Kyx",
        "outputId": "6c41b25b-299a-40a9-f295-9d4e78dde0cc"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              county  general_government  public_safety  public_works  \\\n",
              "0           Allegany                 3.1            6.8          12.2   \n",
              "1       Anne Arundel                 5.4           12.2          11.6   \n",
              "2     Baltimore City                 5.7           14.3          16.7   \n",
              "3   Baltimore County                 4.8           11.8          11.7   \n",
              "4            Calvert                 4.0            7.3           8.1   \n",
              "5           Caroline                 3.0            7.7           2.8   \n",
              "6            Carroll                 6.2            5.4           6.5   \n",
              "7              Cecil                 3.9            9.0           7.0   \n",
              "8            Charles                 6.4           13.1           7.7   \n",
              "9         Dorchester                10.4            8.7           7.0   \n",
              "10         Frederick                 4.4           10.2           8.5   \n",
              "11           Garrett                 4.4            6.3          19.0   \n",
              "12           Harford                 9.6            9.6           9.1   \n",
              "13            Howard                 6.9           10.5           8.7   \n",
              "14              Kent                 6.8           11.8           9.0   \n",
              "15        Montgomery                 6.1           10.6          13.1   \n",
              "16   Prince George’s                 5.4            9.6          10.6   \n",
              "17      Queen Anne’s                 5.2           10.9           9.2   \n",
              "18        St. Mary’s                 5.7            9.0           7.1   \n",
              "19          Somerset                 8.3            7.3          10.2   \n",
              "20            Talbot                 6.7            9.3           7.9   \n",
              "21        Washington                 3.3            8.4           9.9   \n",
              "22          Wicomico                 2.5            7.2           4.8   \n",
              "23         Worcester                 6.7           12.4           8.9   \n",
              "24         Statewide                 5.7           10.8          11.5   \n",
              "\n",
              "    health_social_services  education_libraries  parks_recreation  \\\n",
              "0                      6.2                 66.5               0.2   \n",
              "1                      3.5                 59.8               1.8   \n",
              "2                      4.8                 40.6               1.5   \n",
              "3                      2.5                 57.1               1.6   \n",
              "4                      3.1                 61.4               4.1   \n",
              "5                      4.3                 68.1               1.3   \n",
              "6                      3.3                 64.8               0.7   \n",
              "7                      4.0                 68.6               0.5   \n",
              "8                      3.1                 60.4               1.8   \n",
              "9                      4.6                 59.8               0.9   \n",
              "10                     4.6                 63.2               1.0   \n",
              "11                     5.0                 55.1               0.2   \n",
              "12                     2.7                 57.9               1.9   \n",
              "13                     2.4                 60.4               2.5   \n",
              "14                     9.5                 50.1               6.7   \n",
              "15                     4.8                 50.2               3.3   \n",
              "16                     2.2                 52.7               5.6   \n",
              "17                     5.1                 51.8               2.9   \n",
              "18                     3.5                 63.4               2.3   \n",
              "19                     6.2                 60.2               1.8   \n",
              "20                     6.1                 60.4               3.9   \n",
              "21                     3.1                 69.3               0.9   \n",
              "22                     7.0                 69.4               2.5   \n",
              "23                     6.6                 51.6               0.8   \n",
              "24                     3.7                 54.5               2.6   \n",
              "\n",
              "    debt_service  other  \n",
              "0            2.6    2.3  \n",
              "1            4.7    1.1  \n",
              "2            2.9   13.5  \n",
              "3            3.0    7.4  \n",
              "4            5.5    6.5  \n",
              "5            6.6    6.2  \n",
              "6            6.6    6.6  \n",
              "7            4.8    2.2  \n",
              "8            5.4    2.2  \n",
              "9            2.4    6.2  \n",
              "10           4.7    3.4  \n",
              "11           1.5    8.5  \n",
              "12           6.4    2.7  \n",
              "13           6.2    2.4  \n",
              "14           3.8    2.4  \n",
              "15           5.0    6.9  \n",
              "16           4.1    9.8  \n",
              "17           4.3   10.7  \n",
              "18           3.3    5.6  \n",
              "19           4.4    1.6  \n",
              "20           0.7    5.0  \n",
              "21           3.1    2.0  \n",
              "22           3.5    3.1  \n",
              "23           4.6    8.4  \n",
              "24           4.3    6.9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f164f3e6-643a-4967-ac27-417517f5ff58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>county</th>\n",
              "      <th>general_government</th>\n",
              "      <th>public_safety</th>\n",
              "      <th>public_works</th>\n",
              "      <th>health_social_services</th>\n",
              "      <th>education_libraries</th>\n",
              "      <th>parks_recreation</th>\n",
              "      <th>debt_service</th>\n",
              "      <th>other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Allegany</td>\n",
              "      <td>3.1</td>\n",
              "      <td>6.8</td>\n",
              "      <td>12.2</td>\n",
              "      <td>6.2</td>\n",
              "      <td>66.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>2.6</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Anne Arundel</td>\n",
              "      <td>5.4</td>\n",
              "      <td>12.2</td>\n",
              "      <td>11.6</td>\n",
              "      <td>3.5</td>\n",
              "      <td>59.8</td>\n",
              "      <td>1.8</td>\n",
              "      <td>4.7</td>\n",
              "      <td>1.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Baltimore City</td>\n",
              "      <td>5.7</td>\n",
              "      <td>14.3</td>\n",
              "      <td>16.7</td>\n",
              "      <td>4.8</td>\n",
              "      <td>40.6</td>\n",
              "      <td>1.5</td>\n",
              "      <td>2.9</td>\n",
              "      <td>13.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Baltimore County</td>\n",
              "      <td>4.8</td>\n",
              "      <td>11.8</td>\n",
              "      <td>11.7</td>\n",
              "      <td>2.5</td>\n",
              "      <td>57.1</td>\n",
              "      <td>1.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Calvert</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>8.1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>61.4</td>\n",
              "      <td>4.1</td>\n",
              "      <td>5.5</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Caroline</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.7</td>\n",
              "      <td>2.8</td>\n",
              "      <td>4.3</td>\n",
              "      <td>68.1</td>\n",
              "      <td>1.3</td>\n",
              "      <td>6.6</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Carroll</td>\n",
              "      <td>6.2</td>\n",
              "      <td>5.4</td>\n",
              "      <td>6.5</td>\n",
              "      <td>3.3</td>\n",
              "      <td>64.8</td>\n",
              "      <td>0.7</td>\n",
              "      <td>6.6</td>\n",
              "      <td>6.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Cecil</td>\n",
              "      <td>3.9</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>68.6</td>\n",
              "      <td>0.5</td>\n",
              "      <td>4.8</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Charles</td>\n",
              "      <td>6.4</td>\n",
              "      <td>13.1</td>\n",
              "      <td>7.7</td>\n",
              "      <td>3.1</td>\n",
              "      <td>60.4</td>\n",
              "      <td>1.8</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Dorchester</td>\n",
              "      <td>10.4</td>\n",
              "      <td>8.7</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.6</td>\n",
              "      <td>59.8</td>\n",
              "      <td>0.9</td>\n",
              "      <td>2.4</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Frederick</td>\n",
              "      <td>4.4</td>\n",
              "      <td>10.2</td>\n",
              "      <td>8.5</td>\n",
              "      <td>4.6</td>\n",
              "      <td>63.2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Garrett</td>\n",
              "      <td>4.4</td>\n",
              "      <td>6.3</td>\n",
              "      <td>19.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>55.1</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1.5</td>\n",
              "      <td>8.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Harford</td>\n",
              "      <td>9.6</td>\n",
              "      <td>9.6</td>\n",
              "      <td>9.1</td>\n",
              "      <td>2.7</td>\n",
              "      <td>57.9</td>\n",
              "      <td>1.9</td>\n",
              "      <td>6.4</td>\n",
              "      <td>2.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Howard</td>\n",
              "      <td>6.9</td>\n",
              "      <td>10.5</td>\n",
              "      <td>8.7</td>\n",
              "      <td>2.4</td>\n",
              "      <td>60.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>6.2</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Kent</td>\n",
              "      <td>6.8</td>\n",
              "      <td>11.8</td>\n",
              "      <td>9.0</td>\n",
              "      <td>9.5</td>\n",
              "      <td>50.1</td>\n",
              "      <td>6.7</td>\n",
              "      <td>3.8</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Montgomery</td>\n",
              "      <td>6.1</td>\n",
              "      <td>10.6</td>\n",
              "      <td>13.1</td>\n",
              "      <td>4.8</td>\n",
              "      <td>50.2</td>\n",
              "      <td>3.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Prince George’s</td>\n",
              "      <td>5.4</td>\n",
              "      <td>9.6</td>\n",
              "      <td>10.6</td>\n",
              "      <td>2.2</td>\n",
              "      <td>52.7</td>\n",
              "      <td>5.6</td>\n",
              "      <td>4.1</td>\n",
              "      <td>9.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Queen Anne’s</td>\n",
              "      <td>5.2</td>\n",
              "      <td>10.9</td>\n",
              "      <td>9.2</td>\n",
              "      <td>5.1</td>\n",
              "      <td>51.8</td>\n",
              "      <td>2.9</td>\n",
              "      <td>4.3</td>\n",
              "      <td>10.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>St. Mary’s</td>\n",
              "      <td>5.7</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>63.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>3.3</td>\n",
              "      <td>5.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Somerset</td>\n",
              "      <td>8.3</td>\n",
              "      <td>7.3</td>\n",
              "      <td>10.2</td>\n",
              "      <td>6.2</td>\n",
              "      <td>60.2</td>\n",
              "      <td>1.8</td>\n",
              "      <td>4.4</td>\n",
              "      <td>1.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Talbot</td>\n",
              "      <td>6.7</td>\n",
              "      <td>9.3</td>\n",
              "      <td>7.9</td>\n",
              "      <td>6.1</td>\n",
              "      <td>60.4</td>\n",
              "      <td>3.9</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Washington</td>\n",
              "      <td>3.3</td>\n",
              "      <td>8.4</td>\n",
              "      <td>9.9</td>\n",
              "      <td>3.1</td>\n",
              "      <td>69.3</td>\n",
              "      <td>0.9</td>\n",
              "      <td>3.1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Wicomico</td>\n",
              "      <td>2.5</td>\n",
              "      <td>7.2</td>\n",
              "      <td>4.8</td>\n",
              "      <td>7.0</td>\n",
              "      <td>69.4</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Worcester</td>\n",
              "      <td>6.7</td>\n",
              "      <td>12.4</td>\n",
              "      <td>8.9</td>\n",
              "      <td>6.6</td>\n",
              "      <td>51.6</td>\n",
              "      <td>0.8</td>\n",
              "      <td>4.6</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Statewide</td>\n",
              "      <td>5.7</td>\n",
              "      <td>10.8</td>\n",
              "      <td>11.5</td>\n",
              "      <td>3.7</td>\n",
              "      <td>54.5</td>\n",
              "      <td>2.6</td>\n",
              "      <td>4.3</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f164f3e6-643a-4967-ac27-417517f5ff58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f164f3e6-643a-4967-ac27-417517f5ff58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f164f3e6-643a-4967-ac27-417517f5ff58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-14e91dfd-5017-4e4b-812d-c33c8272d4fe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14e91dfd-5017-4e4b-812d-c33c8272d4fe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-14e91dfd-5017-4e4b-812d-c33c8272d4fe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_e5accb35-aba4-435c-835c-2fbf1e4f3c4e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('response')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e5accb35-aba4-435c-835c-2fbf1e4f3c4e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('response');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "response",
              "summary": "{\n  \"name\": \"response\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"county\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"Charles\",\n          \"Prince George\\u2019s\",\n          \"Allegany\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"general_government\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.939346969128182,\n        \"min\": 2.5,\n        \"max\": 10.4,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          3.1,\n          6.7,\n          5.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_safety\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.266590685001007,\n        \"min\": 5.4,\n        \"max\": 14.3,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          6.8,\n          8.4,\n          10.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"public_works\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.427112487211355,\n        \"min\": 2.8,\n        \"max\": 19.0,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          7.7,\n          9.2,\n          12.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"health_social_services\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7318775938270001,\n        \"min\": 2.2,\n        \"max\": 9.5,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          6.2,\n          4.3,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education_libraries\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.10644777649143,\n        \"min\": 40.6,\n        \"max\": 69.4,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          66.5,\n          50.2,\n          60.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parks_recreation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.612379194441142,\n        \"min\": 0.2,\n        \"max\": 6.7,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          0.2,\n          3.9,\n          2.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"debt_service\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.532231488167938,\n        \"min\": 0.7,\n        \"max\": 6.6,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          2.6,\n          5.0,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2492409369984654,\n        \"min\": 1.1,\n        \"max\": 13.5,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          2.3,\n          5.0,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## using seaborn, lets take \"health_social_services\" and create a bar chart by counties\n",
        "\n",
        "## make sure county names on x-axis are vertical or 45 degrees\n",
        "\n",
        "sns.barplot(x='county',y='health_social_services',data=response)\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        },
        "id": "BUFPQ6WEEjxU",
        "outputId": "07ed9838-1ffd-4bd4-d8c9-136de6057281"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}